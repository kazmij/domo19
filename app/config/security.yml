# To get started with security, check out the documentation:
# https://symfony.com/doc/current/security.html
security:

#    # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
#    providers:
#        in_memory:
#            memory: ~

    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    acl:
        connection: default

    firewalls:
        # Disabling the security for the web debug toolbar, the profiler and Assetic.
        dev:
            pattern:  '^%base_routes_prefix%/(_(profiler|wdt)|css|images|js)/'
            security: false

        # -> custom firewall for the admin area of the URL
        admin:
            pattern:            '%base_routes_prefix%/(admin|api/doc)(.*)'
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     '%base_routes_prefix%/admin/login'
                use_forward:    false
                check_path:     '%base_routes_prefix%/admin/login_check'
                failure_path:   null
                default_target_path: sonata_admin_dashboard
                always_use_default_target_path: false
            logout:
                path:           '%base_routes_prefix%/admin/logout'
                target:         '%base_routes_prefix%/admin/login'
            anonymous:          true

        main:
            pattern:  '^%base_routes_prefix%'
            stateless:  false
            anonymous: true

        # -> end custom configuration

        # default login area for standard users

        # This firewall is used to handle the public login area
        # This part is handled by the FOS User Bundle
#        main:
#            pattern:             .*
#            context:             user
#            form_login:
#                provider:       fos_userbundle
#                login_path:     '%base_routes_prefix%/login'
#                use_forward:    false
#                check_path:     '%base_routes_prefix%/login_check'
#                failure_path:   null
#            logout:             true
#            anonymous:          true

#        api_login:
#            pattern:  '^%base_routes_prefix%/api/login'
#            stateless: true
#            anonymous: true
#            json_login:
#                check_path:               '%base_routes_prefix%/api/login'
#                success_handler:          lexik_jwt_authentication.handler.authentication_success
#                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
#
#        api:
#            pattern:   '^%base_routes_prefix%/api(?!/doc)'
#            methods: [PUT, POST, PATCH, DELETE]
#            stateless: true
#            guard:
#                authenticators:
#                    - lexik_jwt_authentication.jwt_token_authenticator

    role_hierarchy:
        ROLE_CONSULTANT: [ROLE_USER, ROLE_SONATA_ADMIN, ROLE_ADMIN, IS_AUTHENTICATED_ANONYMOUSLY]
        ROLE_DIRECTOR: [ROLE_CONSULTANT, ROLE_ADMIN]
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN, ROLE_DIRECTOR]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        SONATA:
            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented

    # set access_strategy to unanimous, else you may have unexpected behaviors
#    access_decision_manager:
#        strategy: unanimous

    encoders:
        FOS\UserBundle\Model\UserInterface: bcrypt

    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

    access_control:
#        - { path: '^%base_routes_prefix%/api/login', roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: '^%base_routes_prefix%/api',       roles: IS_AUTHENTICATED_FULLY, methods: [POST, PUT, PATCH, DELETE] }
        # Admin login page needs to be accessed without credential
        - { path: '^%base_routes_prefix%/admin/login$', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^%base_routes_prefix%/admin/logout$', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^%base_routes_prefix%/admin/login_check$', role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^%base_routes_prefix%/admin/resetting', role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: '^%base_routes_prefix%/admin/', role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
#        - { path: '^%base_routes_prefix%/api/doc', role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        - { path: '^%base_routes_prefix%/.*', role: IS_AUTHENTICATED_ANONYMOUSLY }

