# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
#    AppBundle\:
#        resource: '../../src/AppBundle/*'
#        # you can exclude directories or files
#        # but if a service is unused, it's removed anyway
#        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'
#
#    # controllers are imported separately to make sure they're public
#    # and have a tag that allows actions to type-hint services
#    AppBundle\Controller\:
#        resource: '../../src/AppBundle/Controller'
#        public: true
#        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
#    sensio_framework_extra.view.listener:
#        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener

#    myapp.serialization.media_handler:
#        class: Application\Sonata\MediaBundle\Serializer\MediaSerializationHandler
#        tags:
#            - { name: jms_serializer.handler, type: Application\Sonata\MediaBundle\Entity\Media, direction: serialization, format: json, method: serializeMedia }
#        arguments: [ "@sonata.media.provider.image", "@sonata.media.provider.file", "@jms_serializer", "@request_stack"]
#

#    sonata.news.controller.api.post:
#        class: Application\Sonata\NewsBundle\Controller\Api\PostController
#        arguments: ["@sonata.news.manager.post", "@sonata.news.manager.comment", "@sonata.news.mailer", "@form.factory", "@sonata.formatter.pool"]

#    sonata.page.api.form.type.page:
#        class: Sonata\PageBundle\Form\Type\ApiPageType
#        tags:
#            - { name: form.type, alias: sonata_page_api_form_page }
#        arguments: [ "@jms_serializer.metadata_factory", "@doctrine", 'sonata_page_api_form_page', '%sonata.page.admin.page.entity%', 'sonata_api_write']
#
#    sonata.page.api.form.type.block:
#        class: Sonata\PageBundle\Form\Type\ApiBlockType
#        tags:
#            - { name: form.type, alias: sonata_page_api_form_block }
#        arguments: [ "@jms_serializer.metadata_factory", "@doctrine", 'sonata_page_api_form_block', '%sonata.page.admin.block.entity%', 'sonata_api_write']

    snc_second_level_cache:
        class: '%snc_redis.doctrine_cache_predis.class%'
        arguments:
        - '@snc_redis.default'

    App\DataFixtures\:
        resource: '../DataFixtures'
        tags: [doctrine.fixture.orm]