<?php

namespace Application\Sonata\UserBundle\Entity;

use Application\Sonata\MainBundle\Entity\Province;
use Doctrine\Common\Collections\ArrayCollection;
use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * This file has been generated by the SonataEasyExtendsBundle.
 *
 * @link https://sonata-project.org/easy-extends
 *
 * References:
 * @link http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 */
class User extends BaseUser
{
    /**
     *
     * @var integer
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     */
    protected $profilePicture;

    /**
     * @var ArrayCollection
     */
    protected $relatedUsers;

    /**
     * @var ArrayCollection
     */
    protected $assignedToUsers;

    /**
     * @var Province
     */
    protected $province;

    /**
     * @var string
     */
    protected $city;


    /**
     * Get id.
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set profilePicture.
     *
     * @param \Application\Sonata\MediaBundle\Entity\Media|null $profilePicture
     *
     * @return User
     */
    public function setProfilePicture(\Application\Sonata\MediaBundle\Entity\Media $profilePicture = null)
    {
        $this->profilePicture = $profilePicture;

        return $this;
    }

    /**
     * Get profilePicture.
     *
     * @return \Application\Sonata\MediaBundle\Entity\Media|null
     */
    public function getProfilePicture()
    {
        return $this->profilePicture;
    }

    /**
     * Add relatedUser.
     *
     * @param \Application\Sonata\UserBundle\Entity\User $relatedUser
     *
     * @return User
     */
    public function addRelatedUser(\Application\Sonata\UserBundle\Entity\User $relatedUser, $cascade = true)
    {
        if ($cascade && $relatedUser->getAssignedToUsers()) {
            if (!$relatedUser->getAssignedToUsers()->contains($this)) {
                $relatedUser->addAssignedToUser($this, false);
            }
        }
        $this->relatedUsers[] = $relatedUser;

        return $this;
    }

    /**
     * Remove relatedUser.
     *
     * @param \Application\Sonata\UserBundle\Entity\User $relatedUser
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeRelatedUser(\Application\Sonata\UserBundle\Entity\User $relatedUser, $cascade = true)
    {
        if ($cascade && $relatedUser->getRelatedUsers()) {
            if ($relatedUser->getAssignedToUsers()->contains($this)) {
                $relatedUser->removeAssignedToUser($this, false);
            }
        }
        $this->relatedUsers->removeElement($relatedUser);
    }

    /**
     * Get relatedUsers.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRelatedUsers()
    {
        return $this->relatedUsers;
    }

    /**
     * Add assignedToUser.
     *
     * @param \Application\Sonata\UserBundle\Entity\User $assignedToUser
     *
     * @return User
     */
    public function addAssignedToUser(\Application\Sonata\UserBundle\Entity\User $assignedToUser, $cascade = true)
    {
        if ($cascade && $assignedToUser->getRelatedUsers()) {
            if (!$assignedToUser->getRelatedUsers()->contains($this)) {
                $assignedToUser->addRelatedUser($this, false);
            }
        }

        $this->assignedToUsers[] = $assignedToUser;


        return $this;
    }

    /**
     * Remove assignedToUser.
     *
     * @param \Application\Sonata\UserBundle\Entity\User $assignedToUser
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeAssignedToUser(\Application\Sonata\UserBundle\Entity\User $assignedToUser, $cascade = true)
    {
        if ($cascade && $assignedToUser->getRelatedUsers()) {
            if ($assignedToUser->getRelatedUsers()->contains($this)) {
                $assignedToUser->removeRelatedUser($this, false);
            }
        }

        $this->assignedToUsers->removeElement($assignedToUser);
    }

    /**
     * Get assignedToUsers.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAssignedToUsers()
    {
        return $this->assignedToUsers;
    }

    /**
     * Set city.
     *
     * @param string|null $city
     *
     * @return User
     */
    public function setCity($city = null)
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Get city.
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Set province.
     *
     * @param \Application\Sonata\MainBundle\Entity\Province|null $province
     *
     * @return User
     */
    public function setProvince(\Application\Sonata\MainBundle\Entity\Province $province = null)
    {
        $this->province = $province;

        return $this;
    }

    /**
     * Get province.
     *
     * @return \Application\Sonata\MainBundle\Entity\Province|null
     */
    public function getProvince()
    {
        return $this->province;
    }

    public function getFullName()
    {
        if ($this->getFirstname() || $this->getLastname()) {
            return trim($this->getFirstname() . ' ' . $this->getLastname());
        } else {
            return $this->getUsername();
        }
    }

    public function __toString()
    {
        if ($this->getUsername() || $this->getLastname()) {
            return $this->getUsername() . ' ' . $this->getLastname() . '(' . $this->getUsername() . ')';
        } else {
            return parent::__toString();
        }
    }

    /**
     * @return bool
     */
    public function isDirector()
    {
        foreach ($this->getGroups() as $group) {
            if ($group->getId() == Group::GROUP_DIRECTOR_ID) {
                return true;
            }
        }

        return false;
    }

    /**
     * @return bool
     */
    public function isConsultant()
    {
        foreach ($this->getGroups() as $group) {
            if ($group->getId() == Group::GROUP_CONSULTANT_ID) {
                return true;
            }
        }

        return false;
    }
}
