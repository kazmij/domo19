<?php

namespace Application\Sonata\PageBundle\Entity;

use Sonata\PageBundle\Entity\BasePage as BasePage;

/**
 * This file has been generated by the SonataEasyExtendsBundle.
 *
 * @link https://sonata-project.org/easy-extends
 *
 * References:
 * @link http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 */
class Page extends BasePage
{
    /**
     * @var int $id
     */
    protected $id;

    /**
     * Get id.
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $menus;


    /**
     * Add menu.
     *
     * @param \Sonata\ClassificationBundle\Model\CollectionInterface $menu
     *
     * @return Page
     */
    public function addMenu(\Sonata\ClassificationBundle\Model\CollectionInterface $menu)
    {
        $this->menus[] = $menu;

        return $this;
    }

    /**
     * Remove menu.
     *
     * @param \Sonata\ClassificationBundle\Model\CollectionInterface $menu
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeMenu(\Sonata\ClassificationBundle\Model\CollectionInterface $menu)
    {
        return $this->menus->removeElement($menu);
    }

    /**
     * Get menus.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMenus()
    {
        return $this->menus;
    }

    /**
     * Add child.
     *
     * @param \Application\Sonata\PageBundle\Entity\Page $child
     *
     * @return Page
     */
    public function addChild(\Application\Sonata\PageBundle\Entity\Page $child)
    {
        $this->children[] = $child;

        return $this;
    }

    /**
     * Remove child.
     *
     * @param \Application\Sonata\PageBundle\Entity\Page $child
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeChild(\Application\Sonata\PageBundle\Entity\Page $child)
    {
        return $this->children->removeElement($child);
    }

    /**
     * Add block.
     *
     * @param \Application\Sonata\PageBundle\Entity\Block $block
     *
     * @return Page
     */
    public function addBlock(\Application\Sonata\PageBundle\Entity\Block $block)
    {
        $this->blocks[] = $block;

        return $this;
    }

    /**
     * Remove block.
     *
     * @param \Application\Sonata\PageBundle\Entity\Block $block
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeBlock(\Application\Sonata\PageBundle\Entity\Block $block)
    {
        return $this->blocks->removeElement($block);
    }

    /**
     * Add source.
     *
     * @param \Application\Sonata\PageBundle\Entity\Page $source
     *
     * @return Page
     */
    public function addSource(\Application\Sonata\PageBundle\Entity\Page $source)
    {
        $this->sources[] = $source;

        return $this;
    }

    /**
     * Remove source.
     *
     * @param \Application\Sonata\PageBundle\Entity\Page $source
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeSource(\Application\Sonata\PageBundle\Entity\Page $source)
    {
        return $this->sources->removeElement($source);
    }

    /**
     * Get sources.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSources()
    {
        return $this->sources;
    }
}
